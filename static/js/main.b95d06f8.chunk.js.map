{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Data","DataTableTitle","props","dataVal","newData","map","Val","index","className","data-index","value","name","onChange","changeDataName","disabled","phoneNumber","changeDataPhoneNumber","email","changeDataEmail","onClick","modify","deletData","App","useState","inputDatas","setinputDatas","setnewData","id","type","placeholder","e","target","repeatName","val","inputName","document","getElementById","includes","alert","push","getAttribute","box","getElementsByClassName","getElementsByTagName","console","log","dataIndex","preDelet","splice","preChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b95d06f8.chunk.js","sourcesContent":["// import React from 'react';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nconst Data = [];\n// const Data = [\n//   {\n//     name:'Ted',\n//     phoneNumber:'0912345678',\n//     email:'ted@gmail.com'\n//   },\n//   {\n//     name:'tony',\n//     phoneNumber:'091566578',\n//     email:'tony@gmail.com'\n//   },\n//   {\n//     name:'stanley',\n//     phoneNumber:'0911414678',\n//     email:'stanley@gmail.com'\n//   },\n//   {\n//     name:'barbie',\n//     phoneNumber:'0914255678',\n//     email:'barbie@gmail.com'\n//   }\n// ];\n\nfunction DataTableTitle(props){\n\n\n\n  let dataVal = props.newData.map((Val,index)=>\n    <div className=\"dataFlex\">\n      <div>\n        <input data-index = {index} value = {Val.name} onChange = {props.changeDataName} disabled = {true} ></input>\n      </div>\n      <div>\n        <input data-index = {index} value = {Val.phoneNumber}  onChange = {props.changeDataPhoneNumber} disabled = {true}></input>\n      </div>\n      <div>\n        <input data-index = {index} value = {Val.email} onChange = {props.changeDataEmail} disabled = {true}></input>\n      </div>\n      <div data-index = {index} onClick = {props.modify}>修改</div>\n      <div data-index = {index} onClick = {props.deletData}>刪除</div>\n    </div>\n  )\n  \n  return (\n  <div>\n    <div className=\"dataTableTitle\">\n      <tr>\n        <td>使用者姓名</td>\n        <td>使用者電話</td>\n        <td>使用者E-mail</td>\n      </tr>\n    </div>\n    <div>\n      {dataVal} \n    </div>\n  </div>\n  )\n  \n}\n\nfunction App() {\n \n  let [inputDatas,setinputDatas] =useState({\n    name:'',\n    phoneNumber:'',\n    email:''\n  });\n  let [newData,setnewData] =useState([]) \n\n  function modify(e){\n    let index = e.target.getAttribute(\"data-index\")\n    let div = document.getElementsByClassName('dataFlex')[index]\n    let box = div.getElementsByTagName('input')\n    if(box[0].disabled === true ){\n      box[0].disabled = false\n      box[1].disabled = false\n      box[2].disabled = false\n\n    }else {\n      box[0].disabled = true\n      box[1].disabled = true\n      box[2].disabled = true\n    } \n    \n    \n    console.log(box)\n  }\n\n  function upData(e){\n    let repeatName = Data.map(val=>val.name)\n    let inputName = document.getElementById('name').value\n    if(repeatName.includes(inputName)){\n      alert(`Name重複!`)\n    }else if(inputName === \"\"){\n      alert(`Name空白!`)\n    }\n    else {\n    Data.push(inputDatas)\n    setnewData([...Data])}\n\n  }\n\n  function deletData(dataIndex){\n    let preDelet = [...newData]\n    let index = dataIndex.target.getAttribute(\"data-index\")\n    preDelet.splice(index,1)\n    Data.splice(index,1)\n    setnewData([...preDelet])\n    console.log(index)\n  }\n  function changeDataName(dataIndex){\n    let preChange = [...newData]\n    let index = dataIndex.target.getAttribute(\"data-index\")\n    preChange.splice(index,1,{...preChange[index],name: dataIndex.target.value})\n    Data.splice(index,1,{...Data[index],name: dataIndex.target.value})\n    setnewData([...preChange])\n    console.log(preChange)\n    console.log(Data)\n  }\n  function changeDataPhoneNumber(dataIndex){\n    let preChange = [...newData]\n    let index = dataIndex.target.getAttribute(\"data-index\")\n    preChange.splice(index,1,{...preChange[index],phoneNumber: dataIndex.target.value})\n    Data.splice(index,1,{...Data[index],phoneNumber: dataIndex.target.value})\n    setnewData([...preChange])\n    console.log(preChange)\n  }\n  function changeDataEmail(dataIndex){\n    let preChange = [...newData]\n    let index = dataIndex.target.getAttribute(\"data-index\")\n    preChange.splice(index,1,{...preChange[index],email: dataIndex.target.value})\n    Data.splice(index,1,{...Data[index],email: dataIndex.target.value})\n    setnewData([...preChange])\n    console.log(preChange)\n  }\n\n\n  // e=>{setinputDatas({...inputDatas, name: e.target.value})}\n  return (\n    <div className=\"center\">\n    <div>\n      <h1>Data-CRUD</h1>\n      <form>\n        <div className=\"inputFlex\">\n          <div>\n            <span>姓名</span>\n            <input id=\"name\" type=\"text\" placeholder=\"請輸入姓名\"  onChange={e=>{setinputDatas({...inputDatas, name: e.target.value})}}></input>\n          </div>\n          <div>\n            <span>電話</span>\n            <input type=\"text\" placeholder=\"請輸入電話\" onChange={e=>{setinputDatas({...inputDatas, phoneNumber: e.target.value})}}></input>\n          </div>\n          <div>\n            <span>e-mail</span>\n            <input type=\"text\" placeholder=\"請輸入E-mail\" onChange={e=>{setinputDatas({...inputDatas, email: e.target.value})}}></input>\n          </div>\n        </div>\n      </form>\n    </div>\n      <div>\n        <input className = \"submitBtn\" type=\"submit\" value=\"送出\" onClick={upData}></input>\n      </div>\n      <DataTableTitle newData = {newData} modify = {modify} deletData = {deletData}\n       changeDataName = {changeDataName} changeDataPhoneNumber = {changeDataPhoneNumber} changeDataEmail = {changeDataEmail} />\n    </div>\n    \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}